I"©4<p>This is my customary update of percentage of <i>deep-learning papers</i> in the major vision conferences. At CVPR 2015, I described its <a href="http://localhost:5000/deep-learning-scraping/">exponential growth</a>, and after ICCV 2015 I wondered whether it had <a href="http://localhost:5000/deep-learning-plateau/">plateaued</a>.<br />
<br />
<del>Since the CVF has not released the papers yet, I had to adapt my script to take the titles from the program.</del>
[UPDATE] CVF papers are online, so we can use the generic script shown below.<br />
<br />
You can download all titles in TXT format in <a href="https://www.dropbox.com/sh/nhsric6bksopot3/AADz3BWN6I8i1VsDNLOpvdDAa?dl=0">here</a> if you want to play around. Here the evolution of the results:</p>

<figure class="highlight"><pre><code class="language-python" data-lang="python"><span class="n">CVPR2013</span><span class="p">:</span>  <span class="mf">0.85</span><span class="o">%</span> <span class="p">(</span>  <span class="mi">4</span> <span class="n">out</span> <span class="n">of</span> <span class="mi">471</span><span class="p">)</span>
<span class="n">ICCV2013</span><span class="p">:</span>  <span class="mf">1.54</span><span class="o">%</span> <span class="p">(</span>  <span class="mi">7</span> <span class="n">out</span> <span class="n">of</span> <span class="mi">455</span><span class="p">)</span>
<span class="n">CVPR2014</span><span class="p">:</span>  <span class="mf">3.70</span><span class="o">%</span> <span class="p">(</span> <span class="mi">20</span> <span class="n">out</span> <span class="n">of</span> <span class="mi">540</span><span class="p">)</span>
<span class="n">CVPR2015</span><span class="p">:</span> <span class="mf">14.45</span><span class="o">%</span> <span class="p">(</span> <span class="mi">87</span> <span class="n">out</span> <span class="n">of</span> <span class="mi">602</span><span class="p">)</span>
<span class="n">ICCV2015</span><span class="p">:</span> <span class="mf">14.45</span><span class="o">%</span> <span class="p">(</span> <span class="mi">76</span> <span class="n">out</span> <span class="n">of</span> <span class="mi">526</span><span class="p">)</span>
<span class="n">CVPR2016</span><span class="p">:</span> <span class="mf">23.48</span><span class="o">%</span> <span class="p">(</span><span class="mi">151</span> <span class="n">out</span> <span class="n">of</span> <span class="mi">643</span><span class="p">)</span></code></pre></figure>

<p>And the plot using XKCD style, as described in this <a href="http://localhost:5000/xkcd-deep-learning/">blog post</a>:
<br />
<br />
<img align="middle" width="500" src="http://localhost:5000/images/xkcd_deep.png" alt="..." />
<br />
<br /></p>

<p>So the plateau was in fact only a short pit stop to take over again. Maybe it saturated in the <i>classical</i> areas such as object detection or image labeling and is now expanding to the rest of the topics?<br />
<br />
Here the updated code for you to try:</p>

<figure class="highlight"><pre><code class="language-python" data-lang="python"><span class="c1">#!/usr/bin/env python
# -*- coding: utf-8 -*-
</span>
<span class="kn">import</span> <span class="nn">requests</span>
<span class="kn">from</span> <span class="nn">lxml</span> <span class="kn">import</span> <span class="n">html</span>

<span class="n">conferences</span> <span class="o">=</span> <span class="p">[</span><span class="s">"CVPR2013"</span><span class="p">,</span><span class="s">"ICCV2013"</span><span class="p">,</span><span class="s">"CVPR2014"</span><span class="p">,</span><span class="s">"CVPR2015"</span><span class="p">,</span><span class="s">"ICCV2015"</span><span class="p">,</span><span class="s">"CVPR2016"</span><span class="p">]</span>

<span class="k">for</span> <span class="n">conf</span> <span class="ow">in</span> <span class="n">conferences</span><span class="p">:</span>
    <span class="c1"># Get the HTML text and find the classes of type 'ptitle'
</span>    <span class="n">response</span> <span class="o">=</span> <span class="n">requests</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s">"http://www.cv-foundation.org/openaccess/"</span><span class="o">+</span><span class="n">conf</span><span class="o">+</span><span class="s">".py"</span><span class="p">)</span>
    <span class="n">tree</span> <span class="o">=</span> <span class="n">html</span><span class="o">.</span><span class="n">fromstring</span><span class="p">(</span><span class="n">response</span><span class="o">.</span><span class="n">text</span><span class="p">)</span>
    <span class="n">papers</span> <span class="o">=</span> <span class="n">tree</span><span class="o">.</span><span class="n">find_class</span><span class="p">(</span><span class="s">'ptitle'</span><span class="p">)</span>
    
    <span class="c1"># Get all titles in a list
</span>    <span class="n">all_titles</span> <span class="o">=</span> <span class="p">[]</span>
    <span class="k">for</span> <span class="n">paper</span> <span class="ow">in</span> <span class="n">papers</span><span class="p">:</span>
        <span class="n">title</span> <span class="o">=</span> <span class="n">paper</span><span class="o">.</span><span class="n">xpath</span><span class="p">(</span><span class="s">'a/text()'</span><span class="p">)</span>
        <span class="n">all_titles</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">title</span><span class="p">[</span><span class="mi">0</span><span class="p">])</span>
    
    <span class="c1"># Search for the 'deep'-inducing keywords
</span>    <span class="n">keywords</span> <span class="o">=</span> <span class="p">[</span><span class="s">'deep'</span><span class="p">,</span> <span class="s">'cnn'</span><span class="p">,</span> <span class="s">'convolutional'</span><span class="p">,</span> <span class="s">'neural network'</span><span class="p">]</span>
    <span class="n">count</span> <span class="o">=</span> <span class="mi">0</span>
    <span class="k">for</span> <span class="n">title</span> <span class="ow">in</span> <span class="n">all_titles</span><span class="p">:</span>
        <span class="k">for</span> <span class="n">kword</span> <span class="ow">in</span> <span class="n">keywords</span><span class="p">:</span>
            <span class="k">if</span> <span class="n">title</span><span class="o">.</span><span class="n">lower</span><span class="p">()</span><span class="o">.</span><span class="n">find</span><span class="p">(</span><span class="n">kword</span><span class="p">)</span><span class="o">&gt;=</span><span class="mi">0</span><span class="p">:</span>
                <span class="n">count</span> <span class="o">=</span> <span class="n">count</span><span class="o">+</span><span class="mi">1</span>
                <span class="k">break</span>
    <span class="n">percent</span> <span class="o">=</span> <span class="n">count</span><span class="o">/</span><span class="nb">float</span><span class="p">(</span><span class="nb">len</span><span class="p">(</span><span class="n">all_titles</span><span class="p">))</span><span class="o">*</span><span class="mi">100</span>
    <span class="k">print</span><span class="p">(</span><span class="s">"</span><span class="si">%</span><span class="s">s: </span><span class="si">%.2</span><span class="s">f</span><span class="si">%% </span><span class="s">(</span><span class="si">%</span><span class="s">d out of </span><span class="si">%</span><span class="s">d)"</span> <span class="o">%</span> <span class="p">(</span><span class="n">conf</span><span class="p">,</span> <span class="n">percent</span><span class="p">,</span> <span class="n">count</span><span class="p">,</span> <span class="nb">len</span><span class="p">(</span><span class="n">all_titles</span><span class="p">)))</span></code></pre></figure>

<p>And here the old code to parse it from the program:</p>

<figure class="highlight"><pre><code class="language-python" data-lang="python"><span class="c1">#!/usr/bin/env python
# -*- coding: utf-8 -*-
</span><span class="kn">from</span> <span class="nn">HTMLParser</span> <span class="kn">import</span> <span class="n">HTMLParser</span>

<span class="c1"># Global variables
</span><span class="n">on_strong_tag</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
<span class="n">all_titles</span>    <span class="o">=</span> <span class="p">[];</span>

<span class="c1"># Create a subclass of HTMLParser and override the handler methods
</span><span class="k">class</span> <span class="nc">MyHTMLParser</span><span class="p">(</span><span class="n">HTMLParser</span><span class="p">):</span>
    <span class="k">def</span> <span class="nf">handle_starttag</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">tag</span><span class="p">,</span> <span class="n">attrs</span><span class="p">):</span>
        <span class="k">global</span> <span class="n">on_strong_tag</span>
        <span class="k">if</span> <span class="n">tag</span><span class="o">==</span><span class="s">'strong'</span><span class="p">:</span>
            <span class="n">on_strong_tag</span> <span class="o">=</span> <span class="mi">1</span>
    <span class="k">def</span> <span class="nf">handle_endtag</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">tag</span><span class="p">):</span>
        <span class="k">global</span> <span class="n">on_strong_tag</span>
        <span class="k">if</span> <span class="n">tag</span><span class="o">==</span><span class="s">'strong'</span><span class="p">:</span>
            <span class="n">on_strong_tag</span> <span class="o">=</span> <span class="mi">0</span>
    <span class="k">def</span> <span class="nf">handle_data</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">data</span><span class="p">):</span>
        <span class="k">global</span> <span class="n">on_strong_tag</span><span class="p">,</span> <span class="n">all_titles</span>
        <span class="k">if</span> <span class="n">on_strong_tag</span> <span class="o">==</span> <span class="mi">1</span><span class="p">:</span>
            <span class="n">all_titles</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">data</span><span class="p">);</span>


<span class="c1"># Parse the file (I erased the orals and spotlights,
#                 and removed all '#&amp;' and '&amp;')
</span><span class="n">parser</span> <span class="o">=</span> <span class="n">MyHTMLParser</span><span class="p">()</span>
<span class="n">f</span> <span class="o">=</span> <span class="nb">open</span><span class="p">(</span><span class="s">'cvpr2016.html'</span><span class="p">,</span> <span class="s">'r'</span><span class="p">);</span>
<span class="n">parser</span><span class="o">.</span><span class="n">feed</span><span class="p">(</span><span class="n">f</span><span class="o">.</span><span class="n">read</span><span class="p">())</span>


<span class="c1"># Search for the 'deep'-inducing keywords
</span><span class="n">conf</span> <span class="o">=</span> <span class="s">'CVPR2016'</span>
<span class="n">keywords</span> <span class="o">=</span> <span class="p">[</span><span class="s">'deep'</span><span class="p">,</span> <span class="s">'cnn'</span><span class="p">,</span> <span class="s">'convolutional'</span><span class="p">,</span> <span class="s">'neural network'</span><span class="p">]</span>
<span class="n">count</span> <span class="o">=</span> <span class="mi">0</span>
<span class="k">for</span> <span class="n">title</span> <span class="ow">in</span> <span class="n">all_titles</span><span class="p">:</span>
    <span class="k">for</span> <span class="n">kword</span> <span class="ow">in</span> <span class="n">keywords</span><span class="p">:</span>
        <span class="k">if</span> <span class="n">title</span><span class="o">.</span><span class="n">lower</span><span class="p">()</span><span class="o">.</span><span class="n">find</span><span class="p">(</span><span class="n">kword</span><span class="p">)</span><span class="o">&gt;=</span><span class="mi">0</span><span class="p">:</span>
            <span class="n">count</span> <span class="o">=</span> <span class="n">count</span><span class="o">+</span><span class="mi">1</span>
            <span class="k">break</span>
<span class="n">percent</span> <span class="o">=</span> <span class="n">count</span><span class="o">/</span><span class="nb">float</span><span class="p">(</span><span class="nb">len</span><span class="p">(</span><span class="n">all_titles</span><span class="p">))</span><span class="o">*</span><span class="mi">100</span>
<span class="k">print</span><span class="p">(</span><span class="s">"</span><span class="si">%</span><span class="s">s: </span><span class="si">%.2</span><span class="s">f</span><span class="si">%% </span><span class="s">(</span><span class="si">%</span><span class="s">d out of </span><span class="si">%</span><span class="s">d)"</span> <span class="o">%</span> <span class="p">(</span><span class="n">conf</span><span class="p">,</span> <span class="n">percent</span><span class="p">,</span> <span class="n">count</span><span class="p">,</span> <span class="nb">len</span><span class="p">(</span><span class="n">all_titles</span><span class="p">)))</span></code></pre></figure>
:ET